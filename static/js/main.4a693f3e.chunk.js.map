{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","randomAdvice","handleClick","bind","this","getAdvice","fetch","then","response","json","data","setState","slip","advice","event","preventDefault","className","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA0CeA,G,wDArCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,IAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,gEASjBC,KAAKC,c,kCAGM,IAAD,OACVC,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACV,aAAcS,EAAKE,KAAKC,c,kCAG7CC,GACVA,EAAMC,iBACNX,KAAKC,c,+BAIL,OACE,sBAAKW,UAAU,MAAf,UACE,qBAAKA,UAAU,SACb,qBAAKA,UAAU,SAAf,SAAyBZ,KAAKJ,MAAMC,eACtC,qBAAKe,UAAU,SACf,wBAAQA,UAAU,SAASC,QAASb,KAAKF,YAAzC,2C,GA/BUgB,cCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4a693f3e.chunk.js","sourcesContent":["import './App.scss';\nimport { Component } from 'react';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      randomAdvice: ''\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAdvice();\n  }\n\n  getAdvice() {\n    fetch('https://api.adviceslip.com/advice')\n      .then(response => response.json())\n      .then(data => this.setState({randomAdvice: data.slip.advice}));\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.getAdvice();\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <div className='line'></div>\n          <div className='advice'>{this.state.randomAdvice}</div>\n        <div className='line'></div>\n        <button className='button' onClick={this.handleClick}>\n            give me another advice\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}